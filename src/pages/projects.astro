---
import { GoRepo } from "react-icons/go";
import BaseHeader from "../components/BaseHeader.astro";
import Layout from "../layouts/Layout.astro";
import ProjectCard from "../components/subcomponents/ProjectCard.astro";

let res;
if (Astro.cookies.has("res")) {
  const cookie = Astro.cookies.get("res");
  res = cookie?.json();
} else {
  //@ts-expect-error
  const runtime = Astro.locals.runtime;

  const response = await fetch("https://api.github.com/graphql", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      Authorization: `bearer ${(runtime ? runtime : import.meta).env.GTOKEN}`,
    },
    body: JSON.stringify({
      query: `
      query {
  user(login: "rahuletto") {
    repositories(first: 30) {
      edges {
        node {
          url
          name
          description
          primaryLanguage {
            name
          }
          forkCount
          stargazerCount
          openGraphImageUrl
          isArchived
          owner {
            login
          }
        }
      }
    }
  }
}
      `,
    }),
  });

  res = await response.json();
  Astro.cookies.set("res", res);
}

const reps = res.data.user.repositories.edges;
const formatted = reps.sort((a: any, b: any) => {
  return b.node.stargazerCount - a.node.stargazerCount;
});
---

<Layout title="Rahuletto - Projects">
  <BaseHeader url="projects" />
  <main>
    <section>
      <div class="title">
        <i
          class="icon"
          id="branch"
          style="position: absolute; transform: rotate(-21deg); top: 12px;"
          ><GoRepo client:idle /></i
        ><h2>Projects</h2>
      </div>

      <div class="grid">
        {
          formatted.map(
            (proj: any) =>
              proj.node.primaryLanguage?.name &&
              !proj.node.isArchived &&
              proj.node.owner.login === "Rahuletto" && (
                <ProjectCard
                  href={proj.node.url}
                  title={proj.node.name}
                  description={proj.node.description}
                  language={proj.node.primaryLanguage?.name}
                  fork={proj.node.forkCount}
                  stars={proj.node.stargazerCount}
                  image={proj.node.openGraphImageUrl}
                />
              )
          )
        }
      </div>
    </section>
  </main>
</Layout>

<style>
  .grid {
    display: flex;
    flex-direction: column;
    gap: 48px;
    margin: 26px;
    margin-bottom: 64px;
  }
  .title {
    display: flex;
    flex-direction: row;
    align-items: center;
    position: relative;
    margin-left: -20px;
  }

  .title svg {
    font-size: 48px;
  }

  .title h2 {
    width: -webkit-fill-available;
    margin-left: 64px;
    font-size: 52px;
    margin-top: 0px;
    background: linear-gradient(105deg, #8a5ad1 3.41%, #56318e 61.25%);
    background-clip: text;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    font-style: normal;
    font-weight: 600;
  }

  section {
    max-width: 80rem;
    margin-left: auto;
    margin-right: auto;
    overflow: auto;
    padding: 2rem 4rem;
  }

  @media only screen and (max-width: 700px) {
    section {
      padding: 1rem 1rem;
    }

    .title {
      margin-left: 0px;
    }

    .title h2 {
      font-size: 38px !important;
      margin-left: 36px;
    }

    .title svg {
      font-size: 26px !important;
    }
  }

  @media only screen and (max-width: 696px) {
    section {
      padding: 1rem 2rem;
      gap: 32px;
    }
  }
</style>
